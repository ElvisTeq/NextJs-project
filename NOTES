## 1 Preparing the Project Pages

- Created
  => "index.js" (main page)
  => "./pages/new-meetup/index.js" (Create meetup page)
  => "./pages/[meetupId]/index.js" (Meetup details)

**\*** "index.js" automatically takes the folder name as URL **\***
Ex => "./pages/[meetupId]/index.js"
=> [meetupId] = index.js

///////////////////////////////////////////////////////////////////////////////////////////////

## 2 Outputting a List of Meetups

- "index.js"
  => Created [DUMMY_DATA]
  => Added <MeetupList.js /> component to JSX

///////////////////////////////////////////////////////////////////////////////////////////////

## 3 Adding the New Meetup Form

- "./pages/new-meetup"
  => Added <NewMeetupForm /> component to JSX
  => Created "addMeetupHandler" for <NewMeetupForm onAddMeetup={addMeetupHandler} />

///////////////////////////////////////////////////////////////////////////////////////////////

## 4 The "\_app.js" File & Layout Wrapper

- "\_app.js"
  => This is the root component (the top layer of the application)
  => Wrapping <Layout> component (will be added to all the application)

- "MainNavigation.js"
  => import Link from 'next/link'
  => For <Link href=''> to work

///////////////////////////////////////////////////////////////////////////////////////////////

## 5 Using Programmatic (Imperative) Navigation

- "MeetupItem.js"
  => { useRouter } ".push" to redirect user to MeetupDetail page
  => Created a showDetailHandler() for the JSW <onClick={showDetailHandler}>

------------------------------------------------- import { useRouter } from "next/router";
const router = useRouter()
router.push('Location') // To redirect user

///////////////////////////////////////////////////////////////////////////////////////////////

## 6 Adding Custom Components & CSS Modules

- Created
  => "MeetupDetails.js" Component
  => "MeetupDetails.module.css"

- "[meetupId]/index.js"
  => Added <MeetupDetail /> component

///////////////////////////////////////////////////////////////////////////////////////////////

## 7 Pre-Rendering in Next.Js / Data fetching for Static Pages

- "./pages/index.js"
  => Implemented "getStaticProps()" To get Data before Loading Page

------------------------------------------------- export const getStaticProps() => { return { **_anyName_**: data } }
(Only Works in Page Components) (Always returns { props: { **_anyName_**: Data } })
Function Runs during the build process
<MeetupList meetups={props.anyName} />

///////////////////////////////////////////////////////////////////////////////////////////////

## 8 More Static Site Generation (SSG)

------------------------------------------------- npm run build
To see our application details (pages, components, etc)

------------------------------------------------- export const getStaticProps = () => { return { **_anyName_**: data }, revalidatye: 10 }
{return { **_anyName_**: data }, revalidate: 10 }
To => Revalidate/Replace the data if there's any changes every 10 secs

///////////////////////////////////////////////////////////////////////////////////////////////

## 9 Server-side Rendering (SSR) with "getServerSideProps"

- "./pages/index.js"
  => Implemented "getServerSideProps()" to get acces to (req, res)

------------------------------------------------ export const getServerSideProps = () => { return { **_anyName_**: data } }
This runs on the server after deployment (ALso runs after every request)
(Will not run in the client side)

**\*** Has access to (req, res) **\***

///////////////////////////////////////////////////////////////////////////////////////////////

## 10 Working with Params for SSG Data Fetching

- "[meetupId]/index.js"
  => Using "getStaticProps(context)" to get [meetupId]
  => { const meetupId = context.params.meetupId }

///////////////////////////////////////////////////////////////////////////////////////////////

## 11 Fixing Paths Err with "getStaticPaths" & Working with Fallback Pages

- "[meetupId]/index.js"
  => Using "getStaticPaths()"

-------------------------------------------- export const getStaticPaths = () => { return { fallback: , paths: [ {params:{1}}, {params:{2}} ]} }
Needs to be added together when using "getStaticProps(context)" to Pre-Define dynamic [params]

///////////////////////////////////////////////////////////////////////////////////////////////

## 12 Creating API Routes in Next.Js

- Create Folder
  => "./pages/api" (folder)

- Create File
  -> "./pages/api/new-meetup.js" (file)

**\*** The function inside the "./pages/api/new-meetup.js" will run when "/api/new-meetup.js" receives a HTTP request **\***

///////////////////////////////////////////////////////////////////////////////////////////////

## 13 Working with MongoDB

- Set up MongoDB account

- npm i mongodb

- ""/api/new-meetup.js""
  => implemented { MongoClient } To Connect to MongoDB, send/store Data to the API

-------------------------------------------- import { MongoClient } from 'mongodb'

-------------------------------------------- const **client** MongoClient.connect('link-from-mongogb')
To connect out MongoDB account

-------------------------------------------- const **db** = **client**.db()
Method to Create Database

-------------------------------------------- const anyName = **db**.collection('mongodb-collection-name')
To get our collection/location were we going to store our data

-------------------------------------------- const result = await meetupsCollection.insertOne(data);
To insert data to our collection/location

## Environment Variables in Next.js

- ".eng.local" (File created)
  => "process.env.DB_DATA_FROM_FILE" (to get data value)

///////////////////////////////////////////////////////////////////////////////////////////////

## 14 Sending Http Request To Own API Routes

- "/new-meetup/index.js"
  => "fetch()" Sending API request to our own API route "/api/new-meetup"
  => { useRouter } .push('') => to redirect user after submit

///////////////////////////////////////////////////////////////////////////////////////////////

## 15 Getting Data from Database

- "/pages/index.js"
  => using { MongoClient } To Connecto to Database & Get data
  => and { getStaticProps } To Pre render/fetch data before page loads (instead of Creating another API Route to fetch data)
